; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mattr=+sve -force-streaming-compatible < %s | FileCheck %s
; RUN: llc -mattr=+sme -force-streaming < %s | FileCheck %s
; RUN: llc -force-streaming-compatible < %s | FileCheck %s --check-prefix=NONEON-NOSVE


target triple = "aarch64-unknown-linux-gnu"

define i1 @ptest_v16i1(ptr %a, ptr %b) {
; CHECK-LABEL: ptest_v16i1:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q1, q0, [x0, #32]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q2, q3, [x0]
; CHECK-NEXT:    fcmne p1.s, p0/z, z0.s, #0.0
; CHECK-NEXT:    fcmne p2.s, p0/z, z1.s, #0.0
; CHECK-NEXT:    fcmne p3.s, p0/z, z3.s, #0.0
; CHECK-NEXT:    fcmne p0.s, p0/z, z2.s, #0.0
; CHECK-NEXT:    mov z0.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z1.s, p2/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z2.s, p3/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z3.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    uzp1 z1.h, z1.h, z1.h
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    uzp1 z3.h, z3.h, z3.h
; CHECK-NEXT:    splice z1.h, p0, z1.h, z0.h
; CHECK-NEXT:    splice z3.h, p0, z3.h, z2.h
; CHECK-NEXT:    ptrue p0.b, vl8
; CHECK-NEXT:    uzp1 z0.b, z1.b, z1.b
; CHECK-NEXT:    uzp1 z1.b, z3.b, z3.b
; CHECK-NEXT:    splice z1.b, p0, z1.b, z0.b
; CHECK-NEXT:    ptrue p0.b, vl16
; CHECK-NEXT:    umaxv b0, p0, z1.b
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    and w0, w8, #0x1
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: ptest_v16i1:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ldp q3, q2, [x0, #32]
; NONEON-NOSVE-NEXT:    stp q0, q2, [sp, #-64]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 64
; NONEON-NOSVE-NEXT:    stp q1, q3, [sp, #32]
; NONEON-NOSVE-NEXT:    ldp s0, s1, [sp]
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    cset w8, ne
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    ldp s0, s1, [sp, #8]
; NONEON-NOSVE-NEXT:    csinc w8, w8, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    csinc w8, w8, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    ldp s0, s1, [sp, #32]
; NONEON-NOSVE-NEXT:    csinc w8, w8, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    csinc w8, w8, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    ldp s0, s1, [sp, #40]
; NONEON-NOSVE-NEXT:    csinc w8, w8, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    csinc w8, w8, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    sbfx w8, w8, #0, #1
; NONEON-NOSVE-NEXT:    ldp s0, s1, [sp, #48]
; NONEON-NOSVE-NEXT:    cset w9, ne
; NONEON-NOSVE-NEXT:    and w8, w8, #0xff
; NONEON-NOSVE-NEXT:    sbfx w9, w9, #0, #1
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w9
; NONEON-NOSVE-NEXT:    csel w8, w8, w9, hi
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    cset w9, ne
; NONEON-NOSVE-NEXT:    sbfx w9, w9, #0, #1
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w9
; NONEON-NOSVE-NEXT:    csel w8, w8, w9, hi
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    ldp s0, s1, [sp, #56]
; NONEON-NOSVE-NEXT:    cset w9, ne
; NONEON-NOSVE-NEXT:    sbfx w9, w9, #0, #1
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w9
; NONEON-NOSVE-NEXT:    csel w8, w8, w9, hi
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    cset w9, ne
; NONEON-NOSVE-NEXT:    sbfx w9, w9, #0, #1
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w9
; NONEON-NOSVE-NEXT:    csel w8, w8, w9, hi
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    ldp s0, s1, [sp, #16]
; NONEON-NOSVE-NEXT:    cset w9, ne
; NONEON-NOSVE-NEXT:    sbfx w9, w9, #0, #1
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w9
; NONEON-NOSVE-NEXT:    csel w8, w8, w9, hi
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    cset w9, ne
; NONEON-NOSVE-NEXT:    sbfx w9, w9, #0, #1
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w9
; NONEON-NOSVE-NEXT:    csel w8, w8, w9, hi
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    ldp s0, s1, [sp, #24]
; NONEON-NOSVE-NEXT:    cset w9, ne
; NONEON-NOSVE-NEXT:    sbfx w9, w9, #0, #1
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w9
; NONEON-NOSVE-NEXT:    csel w8, w8, w9, hi
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    cset w9, ne
; NONEON-NOSVE-NEXT:    sbfx w9, w9, #0, #1
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w9
; NONEON-NOSVE-NEXT:    csel w8, w8, w9, hi
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    cset w9, ne
; NONEON-NOSVE-NEXT:    sbfx w9, w9, #0, #1
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w9
; NONEON-NOSVE-NEXT:    csel w8, w8, w9, hi
; NONEON-NOSVE-NEXT:    and w0, w8, #0x1
; NONEON-NOSVE-NEXT:    add sp, sp, #64
; NONEON-NOSVE-NEXT:    ret
  %v0 = bitcast ptr %a to ptr
  %v1 = load <16 x float>, ptr %v0, align 4
  %v2 = fcmp une <16 x float> %v1, zeroinitializer
  %v3 = call i1 @llvm.vector.reduce.or.i1.v16i1 (<16 x i1> %v2)
  ret i1 %v3
}

define i1 @ptest_or_v16i1(ptr %a, ptr %b) {
; CHECK-LABEL: ptest_or_v16i1:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q1, q0, [x0, #32]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q2, q3, [x0]
; CHECK-NEXT:    ldp q4, q5, [x1, #32]
; CHECK-NEXT:    fcmne p1.s, p0/z, z0.s, #0.0
; CHECK-NEXT:    fcmne p2.s, p0/z, z1.s, #0.0
; CHECK-NEXT:    ldp q0, q1, [x1]
; CHECK-NEXT:    fcmne p3.s, p0/z, z3.s, #0.0
; CHECK-NEXT:    fcmne p4.s, p0/z, z2.s, #0.0
; CHECK-NEXT:    fcmne p5.s, p0/z, z5.s, #0.0
; CHECK-NEXT:    fcmne p6.s, p0/z, z4.s, #0.0
; CHECK-NEXT:    fcmne p7.s, p0/z, z1.s, #0.0
; CHECK-NEXT:    fcmne p0.s, p0/z, z0.s, #0.0
; CHECK-NEXT:    mov z0.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z1.s, p2/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z2.s, p3/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z3.s, p4/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z4.s, p5/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z5.s, p6/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    mov z6.s, p7/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z7.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    uzp1 z1.h, z1.h, z1.h
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    uzp1 z3.h, z3.h, z3.h
; CHECK-NEXT:    uzp1 z4.h, z4.h, z4.h
; CHECK-NEXT:    uzp1 z5.h, z5.h, z5.h
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z6.h, z6.h, z6.h
; CHECK-NEXT:    uzp1 z7.h, z7.h, z7.h
; CHECK-NEXT:    splice z1.h, p0, z1.h, z0.h
; CHECK-NEXT:    splice z3.h, p0, z3.h, z2.h
; CHECK-NEXT:    splice z5.h, p0, z5.h, z4.h
; CHECK-NEXT:    splice z7.h, p0, z7.h, z6.h
; CHECK-NEXT:    ptrue p0.b, vl8
; CHECK-NEXT:    uzp1 z0.b, z1.b, z1.b
; CHECK-NEXT:    uzp1 z1.b, z3.b, z3.b
; CHECK-NEXT:    uzp1 z2.b, z5.b, z5.b
; CHECK-NEXT:    uzp1 z3.b, z7.b, z7.b
; CHECK-NEXT:    splice z1.b, p0, z1.b, z0.b
; CHECK-NEXT:    splice z3.b, p0, z3.b, z2.b
; CHECK-NEXT:    ptrue p0.b, vl16
; CHECK-NEXT:    orr z0.d, z1.d, z3.d
; CHECK-NEXT:    umaxv b0, p0, z0.b
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    and w0, w8, #0x1
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: ptest_or_v16i1:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q2, [x0]
; NONEON-NOSVE-NEXT:    ldp q3, q1, [x0, #32]
; NONEON-NOSVE-NEXT:    str q0, [sp, #-128]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 128
; NONEON-NOSVE-NEXT:    stp q1, q2, [sp, #32]
; NONEON-NOSVE-NEXT:    ldp s0, s1, [sp]
; NONEON-NOSVE-NEXT:    str q3, [sp, #64]
; NONEON-NOSVE-NEXT:    ldp q3, q4, [x1, #32]
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    ldp s2, s0, [sp, #40]
; NONEON-NOSVE-NEXT:    cset w8, ne
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    cset w9, ne
; NONEON-NOSVE-NEXT:    fcmp s2, #0.0
; NONEON-NOSVE-NEXT:    ldp s2, s0, [sp, #32]
; NONEON-NOSVE-NEXT:    cset w10, ne
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    cset w11, ne
; NONEON-NOSVE-NEXT:    fcmp s2, #0.0
; NONEON-NOSVE-NEXT:    ldp s2, s0, [sp, #72]
; NONEON-NOSVE-NEXT:    cset w12, ne
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    cset w13, ne
; NONEON-NOSVE-NEXT:    fcmp s2, #0.0
; NONEON-NOSVE-NEXT:    ldp s2, s0, [sp, #64]
; NONEON-NOSVE-NEXT:    cset w14, ne
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    cset w15, ne
; NONEON-NOSVE-NEXT:    fcmp s2, #0.0
; NONEON-NOSVE-NEXT:    ldp s2, s0, [sp, #56]
; NONEON-NOSVE-NEXT:    cset w16, ne
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    cset w17, ne
; NONEON-NOSVE-NEXT:    fcmp s2, #0.0
; NONEON-NOSVE-NEXT:    cset w0, ne
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    ldp s0, s1, [sp, #8]
; NONEON-NOSVE-NEXT:    cset w2, ne
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    ldp s0, s5, [sp, #48]
; NONEON-NOSVE-NEXT:    cset w3, ne
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    ldp q2, q1, [x1]
; NONEON-NOSVE-NEXT:    str q3, [sp, #112]
; NONEON-NOSVE-NEXT:    cset w4, ne
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    stp q4, q1, [sp, #80]
; NONEON-NOSVE-NEXT:    ldp s0, s1, [sp, #96]
; NONEON-NOSVE-NEXT:    str q2, [sp, #16]
; NONEON-NOSVE-NEXT:    cset w1, ne
; NONEON-NOSVE-NEXT:    fcmp s5, #0.0
; NONEON-NOSVE-NEXT:    cset w18, ne
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    csinc w18, w18, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    ldp s0, s1, [sp, #24]
; NONEON-NOSVE-NEXT:    csinc w1, w1, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    orr w18, w1, w18
; NONEON-NOSVE-NEXT:    csinc w4, w4, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    ldr s0, [sp, #20]
; NONEON-NOSVE-NEXT:    csinc w3, w3, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    ldp s1, s0, [sp, #104]
; NONEON-NOSVE-NEXT:    csinc w2, w2, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    csinc w0, w0, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    ldp s1, s0, [sp, #112]
; NONEON-NOSVE-NEXT:    csinc w17, w17, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    sbfx w17, w17, #0, #1
; NONEON-NOSVE-NEXT:    and w17, w17, #0xff
; NONEON-NOSVE-NEXT:    csinc w16, w16, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    ldp s1, s0, [sp, #120]
; NONEON-NOSVE-NEXT:    sbfx w16, w16, #0, #1
; NONEON-NOSVE-NEXT:    csinc w15, w15, wzr, eq
; NONEON-NOSVE-NEXT:    and w16, w16, #0xff
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    sbfx w15, w15, #0, #1
; NONEON-NOSVE-NEXT:    and w15, w15, #0xff
; NONEON-NOSVE-NEXT:    csinc w14, w14, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    ldp s1, s0, [sp, #80]
; NONEON-NOSVE-NEXT:    sbfx w14, w14, #0, #1
; NONEON-NOSVE-NEXT:    csinc w13, w13, wzr, eq
; NONEON-NOSVE-NEXT:    and w14, w14, #0xff
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    sbfx w13, w13, #0, #1
; NONEON-NOSVE-NEXT:    and w13, w13, #0xff
; NONEON-NOSVE-NEXT:    csinc w12, w12, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    ldp s1, s0, [sp, #88]
; NONEON-NOSVE-NEXT:    sbfx w12, w12, #0, #1
; NONEON-NOSVE-NEXT:    csinc w11, w11, wzr, eq
; NONEON-NOSVE-NEXT:    and w12, w12, #0xff
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    sbfx w11, w11, #0, #1
; NONEON-NOSVE-NEXT:    and w11, w11, #0xff
; NONEON-NOSVE-NEXT:    csinc w10, w10, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    ldr s0, [sp, #16]
; NONEON-NOSVE-NEXT:    sbfx w10, w10, #0, #1
; NONEON-NOSVE-NEXT:    csinc w9, w9, wzr, eq
; NONEON-NOSVE-NEXT:    fcmp s0, #0.0
; NONEON-NOSVE-NEXT:    and w10, w10, #0xff
; NONEON-NOSVE-NEXT:    sbfx w9, w9, #0, #1
; NONEON-NOSVE-NEXT:    csinc w8, w8, wzr, eq
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    orr w8, w8, w2
; NONEON-NOSVE-NEXT:    orr w2, w3, w4
; NONEON-NOSVE-NEXT:    orr w8, w8, w2
; NONEON-NOSVE-NEXT:    orr w8, w8, w18
; NONEON-NOSVE-NEXT:    sbfx w18, w0, #0, #1
; NONEON-NOSVE-NEXT:    sbfx w8, w8, #0, #1
; NONEON-NOSVE-NEXT:    and w18, w18, #0xff
; NONEON-NOSVE-NEXT:    and w8, w8, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w18
; NONEON-NOSVE-NEXT:    csel w8, w8, w18, hi
; NONEON-NOSVE-NEXT:    cmp w8, w17
; NONEON-NOSVE-NEXT:    csel w8, w8, w17, hi
; NONEON-NOSVE-NEXT:    cmp w8, w16
; NONEON-NOSVE-NEXT:    csel w8, w8, w16, hi
; NONEON-NOSVE-NEXT:    cmp w8, w15
; NONEON-NOSVE-NEXT:    csel w8, w8, w15, hi
; NONEON-NOSVE-NEXT:    cmp w8, w14
; NONEON-NOSVE-NEXT:    csel w8, w8, w14, hi
; NONEON-NOSVE-NEXT:    cmp w8, w13
; NONEON-NOSVE-NEXT:    csel w8, w8, w13, hi
; NONEON-NOSVE-NEXT:    cmp w8, w12
; NONEON-NOSVE-NEXT:    csel w8, w8, w12, hi
; NONEON-NOSVE-NEXT:    cmp w8, w11
; NONEON-NOSVE-NEXT:    csel w8, w8, w11, hi
; NONEON-NOSVE-NEXT:    cmp w8, w10
; NONEON-NOSVE-NEXT:    csel w8, w8, w10, hi
; NONEON-NOSVE-NEXT:    cmp w8, w9
; NONEON-NOSVE-NEXT:    csel w8, w8, w9, hi
; NONEON-NOSVE-NEXT:    and w0, w8, #0x1
; NONEON-NOSVE-NEXT:    add sp, sp, #128
; NONEON-NOSVE-NEXT:    ret
  %v0 = bitcast ptr %a to ptr
  %v1 = load <16 x float>, ptr %v0, align 4
  %v2 = fcmp une <16 x float> %v1, zeroinitializer
  %v3 = bitcast ptr %b to ptr
  %v4 = load <16 x float>, ptr %v3, align 4
  %v5 = fcmp une <16 x float> %v4, zeroinitializer
  %v6 = or <16 x i1> %v2, %v5
  %v7 = call i1 @llvm.vector.reduce.or.i1.v16i1 (<16 x i1> %v6)
  ret i1 %v7
}

declare i1 @llvm.vector.reduce.or.i1.v16i1(<16 x i1>)

;
; AND reduction.
;

define i1 @ptest_and_v16i1(ptr %a, ptr %b) {
; CHECK-LABEL: ptest_and_v16i1:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q1, q0, [x0, #32]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q2, q3, [x0]
; CHECK-NEXT:    ldp q4, q5, [x1, #32]
; CHECK-NEXT:    fcmne p1.s, p0/z, z0.s, #0.0
; CHECK-NEXT:    fcmne p2.s, p0/z, z1.s, #0.0
; CHECK-NEXT:    ldp q0, q1, [x1]
; CHECK-NEXT:    fcmne p3.s, p0/z, z3.s, #0.0
; CHECK-NEXT:    fcmne p4.s, p0/z, z2.s, #0.0
; CHECK-NEXT:    fcmne p5.s, p0/z, z5.s, #0.0
; CHECK-NEXT:    fcmne p6.s, p0/z, z4.s, #0.0
; CHECK-NEXT:    fcmne p7.s, p0/z, z1.s, #0.0
; CHECK-NEXT:    fcmne p0.s, p0/z, z0.s, #0.0
; CHECK-NEXT:    mov z0.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z1.s, p2/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z2.s, p3/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z3.s, p4/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z4.s, p5/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z5.s, p6/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    mov z6.s, p7/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z7.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    uzp1 z1.h, z1.h, z1.h
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    uzp1 z3.h, z3.h, z3.h
; CHECK-NEXT:    uzp1 z4.h, z4.h, z4.h
; CHECK-NEXT:    uzp1 z5.h, z5.h, z5.h
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z6.h, z6.h, z6.h
; CHECK-NEXT:    uzp1 z7.h, z7.h, z7.h
; CHECK-NEXT:    splice z1.h, p0, z1.h, z0.h
; CHECK-NEXT:    splice z3.h, p0, z3.h, z2.h
; CHECK-NEXT:    splice z5.h, p0, z5.h, z4.h
; CHECK-NEXT:    splice z7.h, p0, z7.h, z6.h
; CHECK-NEXT:    ptrue p0.b, vl8
; CHECK-NEXT:    uzp1 z0.b, z1.b, z1.b
; CHECK-NEXT:    uzp1 z1.b, z3.b, z3.b
; CHECK-NEXT:    uzp1 z2.b, z5.b, z5.b
; CHECK-NEXT:    uzp1 z3.b, z7.b, z7.b
; CHECK-NEXT:    splice z1.b, p0, z1.b, z0.b
; CHECK-NEXT:    splice z3.b, p0, z3.b, z2.b
; CHECK-NEXT:    ptrue p0.b, vl16
; CHECK-NEXT:    and z0.d, z1.d, z3.d
; CHECK-NEXT:    uminv b0, p0, z0.b
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    and w0, w8, #0x1
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: ptest_and_v16i1:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q1, q3, [x0]
; NONEON-NOSVE-NEXT:    fmov s0, wzr
; NONEON-NOSVE-NEXT:    ldp q4, q2, [x0, #32]
; NONEON-NOSVE-NEXT:    str q1, [sp, #-128]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 128
; NONEON-NOSVE-NEXT:    stp q2, q3, [sp, #32]
; NONEON-NOSVE-NEXT:    ldp s22, s23, [sp, #8]
; NONEON-NOSVE-NEXT:    str q4, [sp, #64]
; NONEON-NOSVE-NEXT:    ldp s24, s25, [sp, #48]
; NONEON-NOSVE-NEXT:    ldr q20, [x1, #16]
; NONEON-NOSVE-NEXT:    ldp s3, s21, [sp]
; NONEON-NOSVE-NEXT:    ldp s19, s18, [sp, #56]
; NONEON-NOSVE-NEXT:    str q20, [sp, #96]
; NONEON-NOSVE-NEXT:    ldp s17, s16, [sp, #64]
; NONEON-NOSVE-NEXT:    ldp s26, s20, [sp, #96]
; NONEON-NOSVE-NEXT:    ldp s7, s6, [sp, #72]
; NONEON-NOSVE-NEXT:    ldp s5, s4, [sp, #32]
; NONEON-NOSVE-NEXT:    fcmp s20, #0.0
; NONEON-NOSVE-NEXT:    ldr q20, [x1]
; NONEON-NOSVE-NEXT:    ldp s2, s1, [sp, #40]
; NONEON-NOSVE-NEXT:    str q20, [sp, #16]
; NONEON-NOSVE-NEXT:    fccmp s25, s0, #4, ne
; NONEON-NOSVE-NEXT:    cset w8, ne
; NONEON-NOSVE-NEXT:    fcmp s26, #0.0
; NONEON-NOSVE-NEXT:    fccmp s24, s0, #4, ne
; NONEON-NOSVE-NEXT:    ldp s20, s24, [sp, #24]
; NONEON-NOSVE-NEXT:    cset w9, ne
; NONEON-NOSVE-NEXT:    fcmp s24, #0.0
; NONEON-NOSVE-NEXT:    and w8, w9, w8
; NONEON-NOSVE-NEXT:    fccmp s23, s0, #4, ne
; NONEON-NOSVE-NEXT:    ldr s23, [sp, #20]
; NONEON-NOSVE-NEXT:    cset w10, ne
; NONEON-NOSVE-NEXT:    fcmp s20, #0.0
; NONEON-NOSVE-NEXT:    fccmp s22, s0, #4, ne
; NONEON-NOSVE-NEXT:    cset w11, ne
; NONEON-NOSVE-NEXT:    fcmp s23, #0.0
; NONEON-NOSVE-NEXT:    and w10, w11, w10
; NONEON-NOSVE-NEXT:    fccmp s21, s0, #4, ne
; NONEON-NOSVE-NEXT:    ldp s20, s21, [sp, #104]
; NONEON-NOSVE-NEXT:    cset w12, ne
; NONEON-NOSVE-NEXT:    fcmp s20, #0.0
; NONEON-NOSVE-NEXT:    fccmp s19, s0, #4, ne
; NONEON-NOSVE-NEXT:    ldr q19, [x1, #32]
; NONEON-NOSVE-NEXT:    str q19, [sp, #112]
; NONEON-NOSVE-NEXT:    cset w13, ne
; NONEON-NOSVE-NEXT:    fcmp s21, #0.0
; NONEON-NOSVE-NEXT:    sbfx w9, w13, #0, #1
; NONEON-NOSVE-NEXT:    fccmp s18, s0, #4, ne
; NONEON-NOSVE-NEXT:    ldp s18, s19, [sp, #112]
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    cset w14, ne
; NONEON-NOSVE-NEXT:    fcmp s18, #0.0
; NONEON-NOSVE-NEXT:    fccmp s17, s0, #4, ne
; NONEON-NOSVE-NEXT:    cset w15, ne
; NONEON-NOSVE-NEXT:    fcmp s19, #0.0
; NONEON-NOSVE-NEXT:    sbfx w11, w15, #0, #1
; NONEON-NOSVE-NEXT:    fccmp s16, s0, #4, ne
; NONEON-NOSVE-NEXT:    ldp s16, s17, [sp, #120]
; NONEON-NOSVE-NEXT:    and w11, w11, #0xff
; NONEON-NOSVE-NEXT:    cset w16, ne
; NONEON-NOSVE-NEXT:    fcmp s16, #0.0
; NONEON-NOSVE-NEXT:    fccmp s7, s0, #4, ne
; NONEON-NOSVE-NEXT:    ldr q7, [x1, #48]
; NONEON-NOSVE-NEXT:    str q7, [sp, #80]
; NONEON-NOSVE-NEXT:    cset w17, ne
; NONEON-NOSVE-NEXT:    fcmp s17, #0.0
; NONEON-NOSVE-NEXT:    fccmp s6, s0, #4, ne
; NONEON-NOSVE-NEXT:    ldp s6, s7, [sp, #80]
; NONEON-NOSVE-NEXT:    cset w18, ne
; NONEON-NOSVE-NEXT:    fcmp s6, #0.0
; NONEON-NOSVE-NEXT:    fccmp s5, s0, #4, ne
; NONEON-NOSVE-NEXT:    cset w0, ne
; NONEON-NOSVE-NEXT:    fcmp s7, #0.0
; NONEON-NOSVE-NEXT:    fccmp s4, s0, #4, ne
; NONEON-NOSVE-NEXT:    ldp s4, s5, [sp, #88]
; NONEON-NOSVE-NEXT:    cset w1, ne
; NONEON-NOSVE-NEXT:    fcmp s4, #0.0
; NONEON-NOSVE-NEXT:    fccmp s2, s0, #4, ne
; NONEON-NOSVE-NEXT:    cset w2, ne
; NONEON-NOSVE-NEXT:    fcmp s5, #0.0
; NONEON-NOSVE-NEXT:    fccmp s1, s0, #4, ne
; NONEON-NOSVE-NEXT:    ldr s1, [sp, #16]
; NONEON-NOSVE-NEXT:    cset w3, ne
; NONEON-NOSVE-NEXT:    fcmp s1, #0.0
; NONEON-NOSVE-NEXT:    fccmp s3, s0, #4, ne
; NONEON-NOSVE-NEXT:    cset w4, ne
; NONEON-NOSVE-NEXT:    and w12, w4, w12
; NONEON-NOSVE-NEXT:    and w10, w12, w10
; NONEON-NOSVE-NEXT:    and w8, w10, w8
; NONEON-NOSVE-NEXT:    sbfx w10, w14, #0, #1
; NONEON-NOSVE-NEXT:    sbfx w8, w8, #0, #1
; NONEON-NOSVE-NEXT:    and w10, w10, #0xff
; NONEON-NOSVE-NEXT:    and w8, w8, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w9
; NONEON-NOSVE-NEXT:    csel w8, w8, w9, lo
; NONEON-NOSVE-NEXT:    sbfx w9, w16, #0, #1
; NONEON-NOSVE-NEXT:    cmp w8, w10
; NONEON-NOSVE-NEXT:    csel w8, w8, w10, lo
; NONEON-NOSVE-NEXT:    sbfx w10, w17, #0, #1
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w11
; NONEON-NOSVE-NEXT:    csel w8, w8, w11, lo
; NONEON-NOSVE-NEXT:    sbfx w11, w18, #0, #1
; NONEON-NOSVE-NEXT:    and w10, w10, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w9
; NONEON-NOSVE-NEXT:    csel w8, w8, w9, lo
; NONEON-NOSVE-NEXT:    sbfx w9, w0, #0, #1
; NONEON-NOSVE-NEXT:    and w11, w11, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w10
; NONEON-NOSVE-NEXT:    csel w8, w8, w10, lo
; NONEON-NOSVE-NEXT:    sbfx w10, w1, #0, #1
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w11
; NONEON-NOSVE-NEXT:    csel w8, w8, w11, lo
; NONEON-NOSVE-NEXT:    sbfx w11, w2, #0, #1
; NONEON-NOSVE-NEXT:    and w10, w10, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w9
; NONEON-NOSVE-NEXT:    csel w8, w8, w9, lo
; NONEON-NOSVE-NEXT:    sbfx w9, w3, #0, #1
; NONEON-NOSVE-NEXT:    and w11, w11, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w10
; NONEON-NOSVE-NEXT:    csel w8, w8, w10, lo
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    cmp w8, w11
; NONEON-NOSVE-NEXT:    csel w8, w8, w11, lo
; NONEON-NOSVE-NEXT:    cmp w8, w9
; NONEON-NOSVE-NEXT:    csel w8, w8, w9, lo
; NONEON-NOSVE-NEXT:    and w0, w8, #0x1
; NONEON-NOSVE-NEXT:    add sp, sp, #128
; NONEON-NOSVE-NEXT:    ret
  %v0 = bitcast ptr %a to ptr
  %v1 = load <16 x float>, ptr %v0, align 4
  %v2 = fcmp une <16 x float> %v1, zeroinitializer
  %v3 = bitcast ptr %b to ptr
  %v4 = load <16 x float>, ptr %v3, align 4
  %v5 = fcmp une <16 x float> %v4, zeroinitializer
  %v6 = and <16 x i1> %v2, %v5
  %v7 = call i1 @llvm.vector.reduce.and.i1.v16i1 (<16 x i1> %v6)
  ret i1 %v7
}

declare i1 @llvm.vector.reduce.and.i1.v16i1(<16 x i1>)
